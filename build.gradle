/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'signing'
    id 'com.jfrog.bintray' version '1.8.5'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:20.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
    
    implementation 'com.google.code.gson:gson:2.8.6'
    
    implementation 'com.sun.jersey:jersey-server:1.19.4'
    
    // Core Http library 
    implementation 'com.microsoft.graph:microsoft-graph-core:1.0.1'
}

def pomConfig = {
    licenses {
        license([:]) {
            name "MIT License"
            url "http://opensource.org/licenses/MIT"
            distribution "repo"
        }
    }
}

//Publishing tasks-
//Maven Central Snapshot: publishSnapshotPublicationToMavenRepository
//Maven Central Release: publishMavenCentralReleasePublicationToMaven2Repository
//Bintray Snapshot: publishSnapshotPublicationToMaven3Repository

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier = 'javadoc'
}

signing {
	sign configurations.archives
}
tasks.withType(Sign)*.enabled = mavenCentralPublishingEnabled.toBoolean()

publishing {

    publications {

        maven(MavenPublication) {
            groupId project.property('mavenGroupId')
            artifactId project.property('mavenArtifactId')
            version "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}${mavenArtifactSuffix}"
            from components.java
            artifact sourceJar
        	artifact javadocJar
            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Microsoft Graph Beta SDK for Java')
                root.appendNode('url', 'https://github.com/microsoftgraph/msgraph-beta-sdk-java')
                root.children().last() + pomConfig
                def pomFile = file("${project.buildDir}/libs/microsoft-graph-beta.pom")
                writeTo(pomFile)
            }

        }
        Snapshot(MavenPublication) {
        	customizePom(pom)
        	groupId project.property('mavenGroupId')
        	artifactId project.property('mavenArtifactId')
        	version "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}${mavenCentralSnapshotArtifactSuffix}"
        	from components.java
        	pom.withXml {
        		def pomFile = file("${project.buildDir}/generated-pom.xml")
        		writeTo(pomFile)
        	}
        	artifact sourceJar
        	artifact javadocJar
		}
		
		mavenCentralRelease(MavenPublication) {
        	customizePom(pom)
        	groupId project.property('mavenGroupId')
        	artifactId project.property('mavenArtifactId')
        	version "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}"
        	from components.java
        	pom.withXml {
        		def pomFile = file("${project.buildDir}/generated-pom.xml")
        		writeTo(pomFile)
        		def pomAscFile = signing.sign(pomFile).signatureFiles[0]
        		artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
        	}
        	artifact sourceJar
        	artifact javadocJar
        	project.tasks.signArchives.signatureFiles.each {
        		artifact(it) {
        			def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
        			if(matcher.find()){
        				classifier = matcher.group(1)
        			}
        			else{
        				classifier = null
        			}
        			extension = 'jar.asc'
				}
			}
		}
    }
	repositories {
        maven {
            url = 'https://oss.sonatype.org/content/repositories/snapshots'
            name = 'sonatypeSnapshot'
            
            credentials {
    			if (project.rootProject.file('local.properties').exists()) {
        			Properties properties = new Properties()
        			properties.load(project.rootProject.file('local.properties').newDataInputStream())
        			username = properties.getProperty('sonatypeUsername')
        			password = properties.getProperty('sonatypePassword')
    			}
            }
        }
        
        maven {
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            name = 'sonatype'
            
            credentials {
    			if (project.rootProject.file('local.properties').exists()) {
        			Properties properties = new Properties()
        			properties.load(project.rootProject.file('local.properties').newDataInputStream())
        			username = properties.getProperty('sonatypeUsername')
        			password = properties.getProperty('sonatypePassword')
    			}
            }
        }
        
        maven {
            url = 'http://oss.jfrog.org/artifactory/oss-snapshot-local'
            name = 'jfrogSnapshot'
            
            credentials {
    			if (project.rootProject.file('local.properties').exists()) {
        			Properties properties = new Properties()
        			properties.load(project.rootProject.file('local.properties').newDataInputStream())
        			username = (properties.containsKey('bintray.user')) ? properties.getProperty('bintray.user').toLowerCase() : "BINTRAY_USERNAME"
        			password = properties.getProperty('bintray.apikey')
    			}
            }
		}

        maven {
            url = 'https://oss.jfrog.org/artifactory/libs-release'
            name = 'jfrog'
            
            credentials {
    			if (project.rootProject.file('local.properties').exists()) {
        			Properties properties = new Properties()
        			properties.load(project.rootProject.file('local.properties').newDataInputStream())
        			username = (properties.containsKey('bintray.user')) ? properties.getProperty('bintray.user').toLowerCase() : "BINTRAY_USERNAME"
        			password = properties.getProperty('bintray.apikey')
    			}
            }
		}
    }
}

bintray {
    if (project.rootProject.file('local.properties').exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        user = (properties.containsKey('bintray.user')) ? properties.getProperty('bintray.user').toLowerCase() : "BINTRAY_USERNAME"
        key = properties.getProperty('bintray.apikey')
    }
	publications = ['mavenCentralRelease']
	pkg {
		repo = 'Maven'
		name = project.property('mavenArtifactId')
		userOrg = 'microsoftgraph'
		licenses = ['MIT']
		vcsUrl = 'https://github.com/microsoftgraph/msgraph-beta-sdk-java.git'
		publicDownloadNumbers = true
		version {
			name = "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}"
			vcsTag = "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}"
		}
	}
}

compileJava {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}

def getVersionCode() {
    return mavenMajorVersion.toInteger() * 10000 + mavenMinorVersion.toInteger() * 100 + mavenPatchVersion.toInteger()
}

def getVersionName() {
    return "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}${mavenArtifactSuffix}"
}

artifacts {
	archives jar
	archives sourceJar
	archives javadocJar
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Microsoft Graph Beta SDK'
            name 'Microsoft Graph Beta Java SDK'
            url 'https://github.com/microsoftgraph/msgraph-beta-sdk-java'
            organization {
                name 'Microsoft'
                url 'https://github.com/microsoftgraph/msgraph-beta-sdk-java'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/microsoftgraph/msgraph-beta-sdk-java/issues'
            }
            licenses {
                license {
                    name "MIT License"
            		url "http://opensource.org/licenses/MIT"
            		distribution "repo"
                }
            }
            scm {
                url 'https://github.com/microsoftgraph/msgraph-beta-sdk-java'
            	connection 'scm:git:git://github.com/microsoftgraph/msgraph-beta-sdk-java.git'
            	developerConnection 'scm:git:ssh://git@github.com:microsoftgraph/msgraph-beta-sdk-java.git'
            }
            developers {
                developer {
                    name 'Microsoft'
                }
            }
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
	if (project.rootProject.file('local.properties').exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        tasks.withType(Sign)*.enabled = (properties.containsKey('enableSigning')) ? properties.getProperty('enableSigning').toBoolean() : false
        allprojects { ext."signing.keyId" = properties.getProperty('signing.keyId') }
        allprojects { ext."signing.secretKeyRingFile" = properties.getProperty('signing.secretKeyRingFile') }
		allprojects { ext."signing.password" = properties.getProperty('signing.password') }
    }
}

model {
    tasks.generatePomFileForMavenCentralReleasePublication {
        destination = file("${project.buildDir}/generated-pom.xml")
    }
    tasks.publishMavenCentralReleasePublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenCentralReleasePublicationToSonatypeRepository {
        dependsOn project.tasks.signArchives
    }
}
