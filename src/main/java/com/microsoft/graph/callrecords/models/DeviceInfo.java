// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.callrecords.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Device Info.
 */
public class DeviceInfo implements IJsonBackedObject {

    /** the OData type of the object as returned by the service */
    @SerializedName("@odata.type")
    @Expose
    @Nullable
    public String oDataType;

    private transient AdditionalDataManager additionalDataManager = new AdditionalDataManager(this);

    @Override
    @Nonnull
    public final AdditionalDataManager additionalDataManager() {
        return additionalDataManager;
    }

    /**
     * The Capture Device Driver.
     * 
     */
    @SerializedName(value = "captureDeviceDriver", alternate = {"CaptureDeviceDriver"})
    @Expose
	@Nullable
    public String captureDeviceDriver;

    /**
     * The Capture Device Name.
     * 
     */
    @SerializedName(value = "captureDeviceName", alternate = {"CaptureDeviceName"})
    @Expose
	@Nullable
    public String captureDeviceName;

    /**
     * The Capture Not Functioning Event Ratio.
     * 
     */
    @SerializedName(value = "captureNotFunctioningEventRatio", alternate = {"CaptureNotFunctioningEventRatio"})
    @Expose
	@Nullable
    public Float captureNotFunctioningEventRatio;

    /**
     * The Cpu Insufficent Event Ratio.
     * 
     */
    @SerializedName(value = "cpuInsufficentEventRatio", alternate = {"CpuInsufficentEventRatio"})
    @Expose
	@Nullable
    public Float cpuInsufficentEventRatio;

    /**
     * The Device Clipping Event Ratio.
     * 
     */
    @SerializedName(value = "deviceClippingEventRatio", alternate = {"DeviceClippingEventRatio"})
    @Expose
	@Nullable
    public Float deviceClippingEventRatio;

    /**
     * The Device Glitch Event Ratio.
     * 
     */
    @SerializedName(value = "deviceGlitchEventRatio", alternate = {"DeviceGlitchEventRatio"})
    @Expose
	@Nullable
    public Float deviceGlitchEventRatio;

    /**
     * The Howling Event Count.
     * 
     */
    @SerializedName(value = "howlingEventCount", alternate = {"HowlingEventCount"})
    @Expose
	@Nullable
    public Integer howlingEventCount;

    /**
     * The Initial Signal Level Root Mean Square.
     * 
     */
    @SerializedName(value = "initialSignalLevelRootMeanSquare", alternate = {"InitialSignalLevelRootMeanSquare"})
    @Expose
	@Nullable
    public Float initialSignalLevelRootMeanSquare;

    /**
     * The Low Speech Level Event Ratio.
     * 
     */
    @SerializedName(value = "lowSpeechLevelEventRatio", alternate = {"LowSpeechLevelEventRatio"})
    @Expose
	@Nullable
    public Float lowSpeechLevelEventRatio;

    /**
     * The Low Speech To Noise Event Ratio.
     * 
     */
    @SerializedName(value = "lowSpeechToNoiseEventRatio", alternate = {"LowSpeechToNoiseEventRatio"})
    @Expose
	@Nullable
    public Float lowSpeechToNoiseEventRatio;

    /**
     * The Mic Glitch Rate.
     * 
     */
    @SerializedName(value = "micGlitchRate", alternate = {"MicGlitchRate"})
    @Expose
	@Nullable
    public Float micGlitchRate;

    /**
     * The Received Noise Level.
     * 
     */
    @SerializedName(value = "receivedNoiseLevel", alternate = {"ReceivedNoiseLevel"})
    @Expose
	@Nullable
    public Integer receivedNoiseLevel;

    /**
     * The Received Signal Level.
     * 
     */
    @SerializedName(value = "receivedSignalLevel", alternate = {"ReceivedSignalLevel"})
    @Expose
	@Nullable
    public Integer receivedSignalLevel;

    /**
     * The Render Device Driver.
     * 
     */
    @SerializedName(value = "renderDeviceDriver", alternate = {"RenderDeviceDriver"})
    @Expose
	@Nullable
    public String renderDeviceDriver;

    /**
     * The Render Device Name.
     * 
     */
    @SerializedName(value = "renderDeviceName", alternate = {"RenderDeviceName"})
    @Expose
	@Nullable
    public String renderDeviceName;

    /**
     * The Render Mute Event Ratio.
     * 
     */
    @SerializedName(value = "renderMuteEventRatio", alternate = {"RenderMuteEventRatio"})
    @Expose
	@Nullable
    public Float renderMuteEventRatio;

    /**
     * The Render Not Functioning Event Ratio.
     * 
     */
    @SerializedName(value = "renderNotFunctioningEventRatio", alternate = {"RenderNotFunctioningEventRatio"})
    @Expose
	@Nullable
    public Float renderNotFunctioningEventRatio;

    /**
     * The Render Zero Volume Event Ratio.
     * 
     */
    @SerializedName(value = "renderZeroVolumeEventRatio", alternate = {"RenderZeroVolumeEventRatio"})
    @Expose
	@Nullable
    public Float renderZeroVolumeEventRatio;

    /**
     * The Sent Noise Level.
     * 
     */
    @SerializedName(value = "sentNoiseLevel", alternate = {"SentNoiseLevel"})
    @Expose
	@Nullable
    public Integer sentNoiseLevel;

    /**
     * The Sent Signal Level.
     * 
     */
    @SerializedName(value = "sentSignalLevel", alternate = {"SentSignalLevel"})
    @Expose
	@Nullable
    public Integer sentSignalLevel;

    /**
     * The Speaker Glitch Rate.
     * 
     */
    @SerializedName(value = "speakerGlitchRate", alternate = {"SpeakerGlitchRate"})
    @Expose
	@Nullable
    public Float speakerGlitchRate;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {

    }
}
