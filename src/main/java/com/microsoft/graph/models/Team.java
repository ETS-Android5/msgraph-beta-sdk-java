// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.models.TeamDiscoverySettings;
import com.microsoft.graph.models.TeamFunSettings;
import com.microsoft.graph.models.TeamGuestSettings;
import com.microsoft.graph.models.TeamMemberSettings;
import com.microsoft.graph.models.TeamMessagingSettings;
import com.microsoft.graph.models.TeamSpecialization;
import com.microsoft.graph.models.TeamVisibilityType;
import com.microsoft.graph.models.Channel;
import com.microsoft.graph.models.Group;
import com.microsoft.graph.models.TeamsAppInstallation;
import com.microsoft.graph.models.ConversationMember;
import com.microsoft.graph.models.TeamsAsyncOperation;
import com.microsoft.graph.models.User;
import com.microsoft.graph.models.ResourceSpecificPermissionGrant;
import com.microsoft.graph.models.ProfilePhoto;
import com.microsoft.graph.models.TeamworkTag;
import com.microsoft.graph.models.TeamsTemplate;
import com.microsoft.graph.models.Schedule;
import com.microsoft.graph.models.Entity;
import com.microsoft.graph.requests.ChannelCollectionPage;
import com.microsoft.graph.requests.TeamsAppInstallationCollectionPage;
import com.microsoft.graph.requests.ConversationMemberCollectionPage;
import com.microsoft.graph.requests.TeamsAsyncOperationCollectionPage;
import com.microsoft.graph.requests.UserCollectionPage;
import com.microsoft.graph.requests.ResourceSpecificPermissionGrantCollectionPage;
import com.microsoft.graph.requests.TeamworkTagCollectionPage;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Team.
 */
public class Team extends Entity implements IJsonBackedObject {


    /**
     * The Classification.
     * 
     */
    @SerializedName(value = "classification", alternate = {"Classification"})
    @Expose
	@Nullable
    public String classification;

    /**
     * The Created Date Time.
     * 
     */
    @SerializedName(value = "createdDateTime", alternate = {"CreatedDateTime"})
    @Expose
	@Nullable
    public java.time.OffsetDateTime createdDateTime;

    /**
     * The Description.
     * 
     */
    @SerializedName(value = "description", alternate = {"Description"})
    @Expose
	@Nullable
    public String description;

    /**
     * The Discovery Settings.
     * 
     */
    @SerializedName(value = "discoverySettings", alternate = {"DiscoverySettings"})
    @Expose
	@Nullable
    public TeamDiscoverySettings discoverySettings;

    /**
     * The Display Name.
     * 
     */
    @SerializedName(value = "displayName", alternate = {"DisplayName"})
    @Expose
	@Nullable
    public String displayName;

    /**
     * The Fun Settings.
     * 
     */
    @SerializedName(value = "funSettings", alternate = {"FunSettings"})
    @Expose
	@Nullable
    public TeamFunSettings funSettings;

    /**
     * The Guest Settings.
     * 
     */
    @SerializedName(value = "guestSettings", alternate = {"GuestSettings"})
    @Expose
	@Nullable
    public TeamGuestSettings guestSettings;

    /**
     * The Internal Id.
     * 
     */
    @SerializedName(value = "internalId", alternate = {"InternalId"})
    @Expose
	@Nullable
    public String internalId;

    /**
     * The Is Archived.
     * 
     */
    @SerializedName(value = "isArchived", alternate = {"IsArchived"})
    @Expose
	@Nullable
    public Boolean isArchived;

    /**
     * The Is Membership Limited To Owners.
     * 
     */
    @SerializedName(value = "isMembershipLimitedToOwners", alternate = {"IsMembershipLimitedToOwners"})
    @Expose
	@Nullable
    public Boolean isMembershipLimitedToOwners;

    /**
     * The Member Settings.
     * 
     */
    @SerializedName(value = "memberSettings", alternate = {"MemberSettings"})
    @Expose
	@Nullable
    public TeamMemberSettings memberSettings;

    /**
     * The Messaging Settings.
     * 
     */
    @SerializedName(value = "messagingSettings", alternate = {"MessagingSettings"})
    @Expose
	@Nullable
    public TeamMessagingSettings messagingSettings;

    /**
     * The Specialization.
     * 
     */
    @SerializedName(value = "specialization", alternate = {"Specialization"})
    @Expose
	@Nullable
    public TeamSpecialization specialization;

    /**
     * The Visibility.
     * 
     */
    @SerializedName(value = "visibility", alternate = {"Visibility"})
    @Expose
	@Nullable
    public TeamVisibilityType visibility;

    /**
     * The Web Url.
     * 
     */
    @SerializedName(value = "webUrl", alternate = {"WebUrl"})
    @Expose
	@Nullable
    public String webUrl;

    /**
     * The Channels.
     * 
     */
    @SerializedName(value = "channels", alternate = {"Channels"})
    @Expose
	@Nullable
    public ChannelCollectionPage channels;

    /**
     * The Group.
     * 
     */
    @SerializedName(value = "group", alternate = {"Group"})
    @Expose
	@Nullable
    public Group group;

    /**
     * The Installed Apps.
     * 
     */
    @SerializedName(value = "installedApps", alternate = {"InstalledApps"})
    @Expose
	@Nullable
    public TeamsAppInstallationCollectionPage installedApps;

    /**
     * The Members.
     * 
     */
    @SerializedName(value = "members", alternate = {"Members"})
    @Expose
	@Nullable
    public ConversationMemberCollectionPage members;

    /**
     * The Operations.
     * 
     */
    @SerializedName(value = "operations", alternate = {"Operations"})
    @Expose
	@Nullable
    public TeamsAsyncOperationCollectionPage operations;

    /**
     * The Owners.
     * 
     */
	@Nullable
    public UserCollectionPage owners;

    /**
     * The Permission Grants.
     * 
     */
    @SerializedName(value = "permissionGrants", alternate = {"PermissionGrants"})
    @Expose
	@Nullable
    public ResourceSpecificPermissionGrantCollectionPage permissionGrants;

    /**
     * The Photo.
     * 
     */
    @SerializedName(value = "photo", alternate = {"Photo"})
    @Expose
	@Nullable
    public ProfilePhoto photo;

    /**
     * The Primary Channel.
     * 
     */
    @SerializedName(value = "primaryChannel", alternate = {"PrimaryChannel"})
    @Expose
	@Nullable
    public Channel primaryChannel;

    /**
     * The Tags.
     * 
     */
    @SerializedName(value = "tags", alternate = {"Tags"})
    @Expose
	@Nullable
    public TeamworkTagCollectionPage tags;

    /**
     * The Template.
     * 
     */
    @SerializedName(value = "template", alternate = {"Template"})
    @Expose
	@Nullable
    public TeamsTemplate template;

    /**
     * The Schedule.
     * 
     */
    @SerializedName(value = "schedule", alternate = {"Schedule"})
    @Expose
	@Nullable
    public Schedule schedule;


    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(@Nonnull final ISerializer serializer, @Nonnull final JsonObject json) {


        if (json.has("channels")) {
            channels = serializer.deserializeObject(json.get("channels"), ChannelCollectionPage.class);
        }

        if (json.has("installedApps")) {
            installedApps = serializer.deserializeObject(json.get("installedApps"), TeamsAppInstallationCollectionPage.class);
        }

        if (json.has("members")) {
            members = serializer.deserializeObject(json.get("members"), ConversationMemberCollectionPage.class);
        }

        if (json.has("operations")) {
            operations = serializer.deserializeObject(json.get("operations"), TeamsAsyncOperationCollectionPage.class);
        }

        if (json.has("owners")) {
            owners = serializer.deserializeObject(json.get("owners"), UserCollectionPage.class);
        }

        if (json.has("permissionGrants")) {
            permissionGrants = serializer.deserializeObject(json.get("permissionGrants"), ResourceSpecificPermissionGrantCollectionPage.class);
        }

        if (json.has("tags")) {
            tags = serializer.deserializeObject(json.get("tags"), TeamworkTagCollectionPage.class);
        }
    }
}
