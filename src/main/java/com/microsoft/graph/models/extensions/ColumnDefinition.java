// Template Source: BaseEntity.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.models.extensions.BooleanColumn;
import com.microsoft.graph.models.extensions.CalculatedColumn;
import com.microsoft.graph.models.extensions.ChoiceColumn;
import com.microsoft.graph.models.extensions.ContentApprovalStatusColumn;
import com.microsoft.graph.models.extensions.CurrencyColumn;
import com.microsoft.graph.models.extensions.DateTimeColumn;
import com.microsoft.graph.models.extensions.DefaultColumnValue;
import com.microsoft.graph.models.extensions.GeolocationColumn;
import com.microsoft.graph.models.extensions.HyperlinkOrPictureColumn;
import com.microsoft.graph.models.extensions.LookupColumn;
import com.microsoft.graph.models.extensions.NumberColumn;
import com.microsoft.graph.models.extensions.PersonOrGroupColumn;
import com.microsoft.graph.models.extensions.TermColumn;
import com.microsoft.graph.models.extensions.TextColumn;
import com.microsoft.graph.models.extensions.ThumbnailColumn;
import com.microsoft.graph.models.generated.ColumnTypes;
import com.microsoft.graph.models.extensions.ColumnValidation;
import com.microsoft.graph.models.extensions.ColumnDefinition;
import com.microsoft.graph.models.extensions.Entity;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Column Definition.
 */
public class ColumnDefinition extends Entity implements IJsonBackedObject {


    /**
     * The Boolean.
     * This column stores boolean values.
     */
    @SerializedName(value = "boolean", alternate = {"Boolean"})
    @Expose
    public BooleanColumn msgraphBoolean;

    /**
     * The Calculated.
     * This column's data is calculated based on other columns.
     */
    @SerializedName(value = "calculated", alternate = {"Calculated"})
    @Expose
    public CalculatedColumn calculated;

    /**
     * The Choice.
     * This column stores data from a list of choices.
     */
    @SerializedName(value = "choice", alternate = {"Choice"})
    @Expose
    public ChoiceColumn choice;

    /**
     * The Column Group.
     * For site columns, the name of the group this column belongs to. Helps organize related columns.
     */
    @SerializedName(value = "columnGroup", alternate = {"ColumnGroup"})
    @Expose
    public String columnGroup;

    /**
     * The Content Approval Status.
     * 
     */
    @SerializedName(value = "contentApprovalStatus", alternate = {"ContentApprovalStatus"})
    @Expose
    public ContentApprovalStatusColumn contentApprovalStatus;

    /**
     * The Currency.
     * This column stores currency values.
     */
    @SerializedName(value = "currency", alternate = {"Currency"})
    @Expose
    public CurrencyColumn currency;

    /**
     * The Date Time.
     * This column stores DateTime values.
     */
    @SerializedName(value = "dateTime", alternate = {"DateTime"})
    @Expose
    public DateTimeColumn dateTime;

    /**
     * The Default Value.
     * The default value for this column.
     */
    @SerializedName(value = "defaultValue", alternate = {"DefaultValue"})
    @Expose
    public DefaultColumnValue defaultValue;

    /**
     * The Description.
     * The user-facing description of the column.
     */
    @SerializedName(value = "description", alternate = {"Description"})
    @Expose
    public String description;

    /**
     * The Display Name.
     * The user-facing name of the column.
     */
    @SerializedName(value = "displayName", alternate = {"DisplayName"})
    @Expose
    public String displayName;

    /**
     * The Enforce Unique Values.
     * If true, no two list items may have the same value for this column.
     */
    @SerializedName(value = "enforceUniqueValues", alternate = {"EnforceUniqueValues"})
    @Expose
    public Boolean enforceUniqueValues;

    /**
     * The Geolocation.
     * This column stores a geolocation.
     */
    @SerializedName(value = "geolocation", alternate = {"Geolocation"})
    @Expose
    public GeolocationColumn geolocation;

    /**
     * The Hidden.
     * Specifies whether the column is displayed in the user interface.
     */
    @SerializedName(value = "hidden", alternate = {"Hidden"})
    @Expose
    public Boolean hidden;

    /**
     * The Hyperlink Or Picture.
     * 
     */
    @SerializedName(value = "hyperlinkOrPicture", alternate = {"HyperlinkOrPicture"})
    @Expose
    public HyperlinkOrPictureColumn hyperlinkOrPicture;

    /**
     * The Indexed.
     * Specifies whether the column values can used for sorting and searching.
     */
    @SerializedName(value = "indexed", alternate = {"Indexed"})
    @Expose
    public Boolean indexed;

    /**
     * The Is Deletable.
     * 
     */
    @SerializedName(value = "isDeletable", alternate = {"IsDeletable"})
    @Expose
    public Boolean isDeletable;

    /**
     * The Is Reorderable.
     * 
     */
    @SerializedName(value = "isReorderable", alternate = {"IsReorderable"})
    @Expose
    public Boolean isReorderable;

    /**
     * The Is Sealed.
     * 
     */
    @SerializedName(value = "isSealed", alternate = {"IsSealed"})
    @Expose
    public Boolean isSealed;

    /**
     * The Lookup.
     * This column's data is looked up from another source in the site.
     */
    @SerializedName(value = "lookup", alternate = {"Lookup"})
    @Expose
    public LookupColumn lookup;

    /**
     * The Name.
     * The API-facing name of the column as it appears in the [fields][] on a [listItem][]. For the user-facing name, see displayName.
     */
    @SerializedName(value = "name", alternate = {"Name"})
    @Expose
    public String name;

    /**
     * The Number.
     * This column stores number values.
     */
    @SerializedName(value = "number", alternate = {"Number"})
    @Expose
    public NumberColumn number;

    /**
     * The Person Or Group.
     * This column stores Person or Group values.
     */
    @SerializedName(value = "personOrGroup", alternate = {"PersonOrGroup"})
    @Expose
    public PersonOrGroupColumn personOrGroup;

    /**
     * The Propagate Changes.
     * 
     */
    @SerializedName(value = "propagateChanges", alternate = {"PropagateChanges"})
    @Expose
    public Boolean propagateChanges;

    /**
     * The Read Only.
     * Specifies whether the column values can be modified.
     */
    @SerializedName(value = "readOnly", alternate = {"ReadOnly"})
    @Expose
    public Boolean readOnly;

    /**
     * The Required.
     * Specifies whether the column value is not optional.
     */
    @SerializedName(value = "required", alternate = {"Required"})
    @Expose
    public Boolean required;

    /**
     * The Term.
     * 
     */
    @SerializedName(value = "term", alternate = {"Term"})
    @Expose
    public TermColumn term;

    /**
     * The Text.
     * This column stores text values.
     */
    @SerializedName(value = "text", alternate = {"Text"})
    @Expose
    public TextColumn text;

    /**
     * The Thumbnail.
     * 
     */
    @SerializedName(value = "thumbnail", alternate = {"Thumbnail"})
    @Expose
    public ThumbnailColumn thumbnail;

    /**
     * The Type.
     * 
     */
    @SerializedName(value = "type", alternate = {"Type"})
    @Expose
    public ColumnTypes type;

    /**
     * The Validation.
     * 
     */
    @SerializedName(value = "validation", alternate = {"Validation"})
    @Expose
    public ColumnValidation validation;

    /**
     * The Source Column.
     * 
     */
    @SerializedName(value = "sourceColumn", alternate = {"SourceColumn"})
    @Expose
    public ColumnDefinition sourceColumn;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;

    }
}
