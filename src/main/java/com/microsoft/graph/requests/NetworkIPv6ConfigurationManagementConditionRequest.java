// Template Source: BaseEntityRequest.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests;

import com.microsoft.graph.http.IRequestBuilder;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.models.NetworkIPv6ConfigurationManagementCondition;
import com.microsoft.graph.models.DevicePlatformType;
import com.microsoft.graph.models.ManagementCondition;
import java.util.Arrays;
import java.util.EnumSet;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequest;
import com.microsoft.graph.http.HttpMethod;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Network IPv6Configuration Management Condition Request.
 */
public class NetworkIPv6ConfigurationManagementConditionRequest extends BaseRequest<NetworkIPv6ConfigurationManagementCondition> {
	
    /**
     * The request for the NetworkIPv6ConfigurationManagementCondition
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public NetworkIPv6ConfigurationManagementConditionRequest(@Nonnull final String requestUrl, @Nonnull final IBaseClient<?> client, @Nullable final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, NetworkIPv6ConfigurationManagementCondition.class);
    }

    /**
     * Gets the NetworkIPv6ConfigurationManagementCondition from the service
     *
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<NetworkIPv6ConfigurationManagementCondition> getAsync() {
        return sendAsync(HttpMethod.GET, null);
    }

    /**
     * Gets the NetworkIPv6ConfigurationManagementCondition from the service
     *
     * @return the NetworkIPv6ConfigurationManagementCondition from the request
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public NetworkIPv6ConfigurationManagementCondition get() throws ClientException {
       return send(HttpMethod.GET, null);
    }

    /**
     * Delete this item from the service
     *
     * @return a future with the deletion result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<NetworkIPv6ConfigurationManagementCondition> deleteAsync() {
        return sendAsync(HttpMethod.DELETE, null);
    }

    /**
     * Delete this item from the service
     * @return the resulting response if the service returns anything on deletion
     *
     * @throws ClientException if there was an exception during the delete operation
     */
    @Nullable
    public NetworkIPv6ConfigurationManagementCondition delete() throws ClientException {
        return send(HttpMethod.DELETE, null);
    }

    /**
     * Patches this NetworkIPv6ConfigurationManagementCondition with a source
     *
     * @param sourceNetworkIPv6ConfigurationManagementCondition the source object with updates
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<NetworkIPv6ConfigurationManagementCondition> patchAsync(@Nonnull final NetworkIPv6ConfigurationManagementCondition sourceNetworkIPv6ConfigurationManagementCondition) {
        return sendAsync(HttpMethod.PATCH, sourceNetworkIPv6ConfigurationManagementCondition);
    }

    /**
     * Patches this NetworkIPv6ConfigurationManagementCondition with a source
     *
     * @param sourceNetworkIPv6ConfigurationManagementCondition the source object with updates
     * @return the updated NetworkIPv6ConfigurationManagementCondition
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public NetworkIPv6ConfigurationManagementCondition patch(@Nonnull final NetworkIPv6ConfigurationManagementCondition sourceNetworkIPv6ConfigurationManagementCondition) throws ClientException {
        return send(HttpMethod.PATCH, sourceNetworkIPv6ConfigurationManagementCondition);
    }

    /**
     * Creates a NetworkIPv6ConfigurationManagementCondition with a new object
     *
     * @param newNetworkIPv6ConfigurationManagementCondition the new object to create
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<NetworkIPv6ConfigurationManagementCondition> postAsync(@Nonnull final NetworkIPv6ConfigurationManagementCondition newNetworkIPv6ConfigurationManagementCondition) {
        return sendAsync(HttpMethod.POST, newNetworkIPv6ConfigurationManagementCondition);
    }

    /**
     * Creates a NetworkIPv6ConfigurationManagementCondition with a new object
     *
     * @param newNetworkIPv6ConfigurationManagementCondition the new object to create
     * @return the created NetworkIPv6ConfigurationManagementCondition
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public NetworkIPv6ConfigurationManagementCondition post(@Nonnull final NetworkIPv6ConfigurationManagementCondition newNetworkIPv6ConfigurationManagementCondition) throws ClientException {
        return send(HttpMethod.POST, newNetworkIPv6ConfigurationManagementCondition);
    }

    /**
     * Creates a NetworkIPv6ConfigurationManagementCondition with a new object
     *
     * @param newNetworkIPv6ConfigurationManagementCondition the object to create/update
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<NetworkIPv6ConfigurationManagementCondition> putAsync(@Nonnull final NetworkIPv6ConfigurationManagementCondition newNetworkIPv6ConfigurationManagementCondition) {
        return sendAsync(HttpMethod.PUT, newNetworkIPv6ConfigurationManagementCondition);
    }

    /**
     * Creates a NetworkIPv6ConfigurationManagementCondition with a new object
     *
     * @param newNetworkIPv6ConfigurationManagementCondition the object to create/update
     * @return the created NetworkIPv6ConfigurationManagementCondition
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public NetworkIPv6ConfigurationManagementCondition put(@Nonnull final NetworkIPv6ConfigurationManagementCondition newNetworkIPv6ConfigurationManagementCondition) throws ClientException {
        return send(HttpMethod.PUT, newNetworkIPv6ConfigurationManagementCondition);
    }

    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
     @Nonnull
     public NetworkIPv6ConfigurationManagementConditionRequest select(@Nonnull final String value) {
         addSelectOption(value);
         return this;
     }

    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
     @Nonnull
     public NetworkIPv6ConfigurationManagementConditionRequest expand(@Nonnull final String value) {
         addExpandOption(value);
         return this;
     }

}

