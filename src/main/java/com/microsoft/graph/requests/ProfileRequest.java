// Template Source: BaseEntityRequest.java.tt
// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests;

import com.microsoft.graph.http.IRequestBuilder;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.models.Profile;
import com.microsoft.graph.requests.UserAccountInformationCollectionRequestBuilder;
import com.microsoft.graph.requests.UserAccountInformationRequestBuilder;
import com.microsoft.graph.requests.ItemAddressCollectionRequestBuilder;
import com.microsoft.graph.requests.ItemAddressRequestBuilder;
import com.microsoft.graph.requests.PersonAnnualEventCollectionRequestBuilder;
import com.microsoft.graph.requests.PersonAnnualEventRequestBuilder;
import com.microsoft.graph.requests.PersonAwardCollectionRequestBuilder;
import com.microsoft.graph.requests.PersonAwardRequestBuilder;
import com.microsoft.graph.requests.PersonCertificationCollectionRequestBuilder;
import com.microsoft.graph.requests.PersonCertificationRequestBuilder;
import com.microsoft.graph.requests.EducationalActivityCollectionRequestBuilder;
import com.microsoft.graph.requests.EducationalActivityRequestBuilder;
import com.microsoft.graph.requests.ItemEmailCollectionRequestBuilder;
import com.microsoft.graph.requests.ItemEmailRequestBuilder;
import com.microsoft.graph.requests.PersonInterestCollectionRequestBuilder;
import com.microsoft.graph.requests.PersonInterestRequestBuilder;
import com.microsoft.graph.requests.LanguageProficiencyCollectionRequestBuilder;
import com.microsoft.graph.requests.LanguageProficiencyRequestBuilder;
import com.microsoft.graph.requests.PersonNameCollectionRequestBuilder;
import com.microsoft.graph.requests.PersonNameRequestBuilder;
import com.microsoft.graph.requests.PersonAnnotationCollectionRequestBuilder;
import com.microsoft.graph.requests.PersonAnnotationRequestBuilder;
import com.microsoft.graph.requests.ItemPatentCollectionRequestBuilder;
import com.microsoft.graph.requests.ItemPatentRequestBuilder;
import com.microsoft.graph.requests.ItemPhoneCollectionRequestBuilder;
import com.microsoft.graph.requests.ItemPhoneRequestBuilder;
import com.microsoft.graph.requests.WorkPositionCollectionRequestBuilder;
import com.microsoft.graph.requests.WorkPositionRequestBuilder;
import com.microsoft.graph.requests.ProjectParticipationCollectionRequestBuilder;
import com.microsoft.graph.requests.ProjectParticipationRequestBuilder;
import com.microsoft.graph.requests.ItemPublicationCollectionRequestBuilder;
import com.microsoft.graph.requests.ItemPublicationRequestBuilder;
import com.microsoft.graph.requests.SkillProficiencyCollectionRequestBuilder;
import com.microsoft.graph.requests.SkillProficiencyRequestBuilder;
import com.microsoft.graph.requests.WebAccountCollectionRequestBuilder;
import com.microsoft.graph.requests.WebAccountRequestBuilder;
import com.microsoft.graph.requests.PersonWebsiteCollectionRequestBuilder;
import com.microsoft.graph.requests.PersonWebsiteRequestBuilder;
import java.util.Arrays;
import java.util.EnumSet;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequest;
import com.microsoft.graph.http.HttpMethod;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Profile Request.
 */
public class ProfileRequest extends BaseRequest<Profile> {
	
    /**
     * The request for the Profile
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public ProfileRequest(@Nonnull final String requestUrl, @Nonnull final IBaseClient<?> client, @Nullable final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, Profile.class);
    }

    /**
     * Gets the Profile from the service
     *
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<Profile> getAsync() {
        return sendAsync(HttpMethod.GET, null);
    }

    /**
     * Gets the Profile from the service
     *
     * @return the Profile from the request
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public Profile get() throws ClientException {
       return send(HttpMethod.GET, null);
    }

    /**
     * Delete this item from the service
     *
     * @return a future with the deletion result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<Profile> deleteAsync() {
        return sendAsync(HttpMethod.DELETE, null);
    }

    /**
     * Delete this item from the service
     * @return the resulting response if the service returns anything on deletion
     *
     * @throws ClientException if there was an exception during the delete operation
     */
    @Nullable
    public Profile delete() throws ClientException {
        return send(HttpMethod.DELETE, null);
    }

    /**
     * Patches this Profile with a source
     *
     * @param sourceProfile the source object with updates
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<Profile> patchAsync(@Nonnull final Profile sourceProfile) {
        return sendAsync(HttpMethod.PATCH, sourceProfile);
    }

    /**
     * Patches this Profile with a source
     *
     * @param sourceProfile the source object with updates
     * @return the updated Profile
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public Profile patch(@Nonnull final Profile sourceProfile) throws ClientException {
        return send(HttpMethod.PATCH, sourceProfile);
    }

    /**
     * Creates a Profile with a new object
     *
     * @param newProfile the new object to create
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<Profile> postAsync(@Nonnull final Profile newProfile) {
        return sendAsync(HttpMethod.POST, newProfile);
    }

    /**
     * Creates a Profile with a new object
     *
     * @param newProfile the new object to create
     * @return the created Profile
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public Profile post(@Nonnull final Profile newProfile) throws ClientException {
        return send(HttpMethod.POST, newProfile);
    }

    /**
     * Creates a Profile with a new object
     *
     * @param newProfile the object to create/update
     * @return a future with the result
     */
    @Nonnull
    public java.util.concurrent.CompletableFuture<Profile> putAsync(@Nonnull final Profile newProfile) {
        return sendAsync(HttpMethod.PUT, newProfile);
    }

    /**
     * Creates a Profile with a new object
     *
     * @param newProfile the object to create/update
     * @return the created Profile
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    @Nullable
    public Profile put(@Nonnull final Profile newProfile) throws ClientException {
        return send(HttpMethod.PUT, newProfile);
    }

    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
     @Nonnull
     public ProfileRequest select(@Nonnull final String value) {
         addSelectOption(value);
         return this;
     }

    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
     @Nonnull
     public ProfileRequest expand(@Nonnull final String value) {
         addExpandOption(value);
         return this;
     }

}

